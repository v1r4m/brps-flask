name: Deploy to AWS ECS

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때만 실행

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    env: 
      ecr_url: ${{ secrets.ECR_URL }}
      role_arn: ${{ secrets.ROLE_ARN }}
      aws_region: ${{ secrets.AWS_REGION }}
      tag: latest
      ecs_service: ${{ secrets.ECS_SERVICE }}
      ecs_cluster: ${{ secrets.ECS_CLUSTER }}
      task_definition_family: ${{ secrets.TASK_DEFINITION_FAMILY }}
      container_name: ${{ secrets.CONTAINER_NAME }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: print env
      run: |
        echo "ECR URL: $ecr_url"
        echo "Role ARN: $role_arn"
        echo "AWS Region: $aws_region"
        echo "Tag: $tag"
        echo "ECS Service: $ecs_service"
        echo "ECS Cluster: $ecs_cluster"
        echo "Task Definition Family: $task_definition_family"
        echo "Container Name: $container_name"

    - name: Assume IAM Role (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.role_arn }}
        role-session-name: github-actions-session
        aws-region: ${{ env.aws_region }}

    - name: Check OIDC Token
      run: |
        curl -sLS $ACTIONS_ID_TOKEN_REQUEST_URL \
          -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" | jq
      env:
        ACTIONS_ID_TOKEN_REQUEST_URL: ${{ steps.id-token.outputs.id-token-url }}
        ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ steps.id-token.outputs.id-token-token }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image to ECR
      run: |
        docker build -t ${{ env.ecr_url }}:${{ env.tag }} .
        docker push ${{ env.ecr_url }}:${{ env.tag }}

    - name: Fetch current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.task_definition_family }} \
          --query taskDefinition \
          > task-def.json

    - name: Update task definition with new image
      run: |
        jq --arg IMAGE "${{ env.ecr_url }}:${{ env.tag }}" \
           --arg NAME "${{ env.container_name }}" \
           '(.containerDefinitions[] | select(.name == $NAME) | .image) |= $IMAGE' \
           task-def.json > new-task-def.json

    - name: Render new ECS task definition
      id: render-task
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-def.json
        container-name: ${{ env.container_name }}
        image: ${{ env.ecr_url }}:${{ env.tag }}

    - name: Register new task definition
      id: register-task
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://$GITHUB_WORKSPACE/${{ steps.render-task.outputs.task-definition }} | jq -r '.taskDefinition.taskDefinitionArn')
        echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT


