name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    env: 
      ecr_url: ${{ secrets.ECR_URL }}
      role_arn: ${{ secrets.ROLE_ARN }}
      aws_region: ${{ secrets.AWS_REGION }}
      tag: latest
      ecs_service: ${{ secrets.ECS_SERVICE }}
      ecs_cluster: ${{ secrets.ECS_CLUSTER }}
      task_definition_family: ${{ secrets.TASK_DEFINITION_FAMILY }}
      container_name: ${{ secrets.CONTAINER_NAME }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Print env
      run: |
        echo "ECR URL: $ecr_url"
        echo "Role ARN: $role_arn"
        echo "AWS Region: $aws_region"
        echo "Tag: $tag"
        echo "ECS Service: $ecs_service"
        echo "ECS Cluster: $ecs_cluster"
        echo "Task Definition Family: $task_definition_family"
        echo "Container Name: $container_name"

    - name: Assume IAM Role (OIDC)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.role_arn }}
        role-session-name: github-actions-session
        aws-region: ${{ env.aws_region }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image to ECR
      run: |
        docker build -t ${{ env.ecr_url }}:${{ env.tag }} .
        docker push ${{ env.ecr_url }}:${{ env.tag }}

    - name: Fetch current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.task_definition_family }} \
          --query taskDefinition \
          > task-def.json

    - name: Fetch and clean task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.task_definition_family }} \
          --query taskDefinition \
          > raw-task-def.json

        jq '{
          family,
          taskRoleArn,
          executionRoleArn,
          networkMode,
          containerDefinitions,
          requiresCompatibilities,
          cpu,
          memory
        }' raw-task-def.json > task-def.json

    - name: Add new image + cloudflared
      run: |
        jq --arg IMAGE "${{ env.ecr_url }}:${{ env.tag }}" \
           --arg NAME "${{ env.container_name }}" \
           --arg CLOUDFLARED_IMAGE "cloudflare/cloudflared:latest" \
           --arg CLOUDFLARED_TOKEN "${{ secrets.CLOUDFLARED_TOKEN }}" \
           '(.containerDefinitions[] | select(.name == $NAME) | .image) |= $IMAGE |
             .containerDefinitions += [{
               "name": "cloudflared",
               "image": $CLOUDFLARED_IMAGE,
               "essential": false,
               "command": ["tunnel", "--no-autoupdate", "run", "--token", $CLOUDFLARED_TOKEN]
             }]' \
           task-def.json > new-task-def.json

    - name: Register new task definition
      id: register-task
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json | jq -r '.taskDefinition.taskDefinitionArn')
        echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster $ecs_cluster \
          --service $ecs_service \
          --task-definition ${{ steps.register-task.outputs.task_def_arn }}